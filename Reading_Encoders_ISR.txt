  static int pinA = 2;
  static int pinB = 5;  

  volatile int pinAValue;
  volatile int pinBValue;         // Volatile since they can change at any point in the ISR
  volatile int count; 
    
  void currentPosition();

void setup() {
  Serial.begin(9600); 

  pinMode(pinA, INPUT_PULLUP);              // Sets both pins as pullup inputs to prevent floating values
  pinMode(pinB, INPUT_PULLUP); 

  attachInterrupt(digitalPinToInterrupt(pinA), pinAChange, CHANGE);   // Interrupt triggers with a change in A
}



void loop() {
  // put your main code here, to run repeatedly: 

} 



void pinAChange() { // ISR that triggers when pin A changes  
 
  if (digitalRead(pinA) == digitalRead(pinB) ) { 
    count +=2;                                              // If current values are matching after a change in A, there must have been a clockwise turn
  } 
  else if (digitalRead(pinA) != digitalRead(pinB)) { 
    count -=2;                                              // If current values are not matching after a change in A, there must have been a CCW turn
  }   
  
  Serial.print("Count: ");
  Serial.println(count);        // Prints current count
//  Serial.print("Values: ");
//  Serial.print(pinAValue);
//  Serial.println(pinBValue);     
  Serial.println("--------"); 

  currentPosition();      // Calls current position to update the positions and refine the count 
} 


void currentPosition() {   

      if (pinBValue != digitalRead(pinA)) {           // Increments count down to correct for adding 2
        count--;  
      } 
      else if (pinBValue == digitalRead(pinA)) {      // Increments count up to correct for subtracting 2
        count++;              
      } 
  
  pinAValue = digitalRead(pinA);    // Reassigns pinAValue with the "old" value after it's been used
  pinBValue = digitalRead(pinB); 

}